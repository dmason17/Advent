# def createGrid(max):
#     grid = []
#     for x in range(0, max * 2):
#         line = []
#         for y in range(0, max * 2):
#             line.append('.')
#         grid.append(line)
#     return grid
#
# def printGrid(grid):
#     grid.reverse()
#     for line in grid:
#         print ''.join(line)
#
# def findMax(maxInput, wire):
#     max = maxInput
#     maxR = 0
#     maxL = 0
#     maxU = 0
#     maxD = 0
#     for instruction in wire:
#         if instruction[:1] == 'R' :
#             maxR = maxR + int(instruction[1:])
#         if instruction[:1] == 'L' :
#             maxL = maxL + int(instruction[1:])
#         if instruction[:1] == 'U' :
#             maxU = maxU + int(instruction[1:])
#         if instruction[:1] == 'D' :
#             maxD = maxD + int(instruction[1:])
#     if maxR > max:
#         max = maxR
#     if maxL > max:
#         max = maxL
#     if maxU > max:
#         max = maxU
#     if maxD > max:
#         max = maxD
#     return max
#
# def addWire(wire, max, gridPoints):
#     startingPoint = [max, max]
#     possiblePoints = []
#     for instruction in wire:
#         if instruction[:1] == 'R':
#             for x in range(1, int(instruction[1:])+1):
#                 if (startingPoint[0], startingPoint[1]+x) in gridPoints:
#                     possiblePoints.append((startingPoint[0], startingPoint[1]+x))
#                 else:
#                     gridPoints.append((startingPoint[0], startingPoint[1]+x))
#             startingPoint[1] = startingPoint[1] + int(instruction[1:])
#         elif instruction[:1] == 'L':
#             for x in range(1, int(instruction[1:])+1):
#                 if (startingPoint[0], startingPoint[1]-x) in gridPoints:
#                     possiblePoints.append((startingPoint[0], startingPoint[1]-x))
#                 else:
#                     gridPoints.append((startingPoint[0], startingPoint[1]-x))
#             startingPoint[1] = startingPoint[1] - int(instruction[1:])
#         elif instruction[:1] == 'U':
#             for x in range(1, int(instruction[1:])+1):
#                 if (startingPoint[0]+x, startingPoint[1]) in gridPoints:
#                     possiblePoints.append((startingPoint[0]+x, startingPoint[1]))
#                 else:
#                     gridPoints.append((startingPoint[0]+x, startingPoint[1]))
#             startingPoint[0] = startingPoint[0] + int(instruction[1:])
#         elif instruction[:1] == 'D':
#             for x in range(1, int(instruction[1:])+1):
#                 if (startingPoint[0]-x, startingPoint[1]) in gridPoints:
#                     possiblePoints.append((startingPoint[0]-x, startingPoint[1]))
#                 else:
#                     gridPoints.append((startingPoint[0]-x, startingPoint[1]))
#             startingPoint[0] = startingPoint[0] - int(instruction[1:])
#     return possiblePoints
#
# def findManDistance(possiblePoints, max):
#     manDist = 100000000
#     max = max +1
#     for x in possiblePoints:
#         if abs(x[0]-max) + abs(x[1]-max) < manDist:
#             manDist = abs(x[0]-max) + abs(x[1]-max)
#             print 'X: ' + str(x[0]-max) + ', Y: ' + str(x[1]-max) + ', dist:' + str(manDist)
#     print manDist
#
#
#
# wires = []
# f = open('3.txt', 'r')
# for line in f:
#     wires.append(line)
#
# wire1 = wires[0][:-1].split(',')
# wire2 = wires[1][:-1].split(',')
# print 'done creating wires'
# max = findMax(0, wire1)
# max = findMax(max, wire2)
# print 'done finding max: ' + str(max)
# gridPoints = []
# possiblePoints = []
# print 'adding wire1'
# # possiblePoints.extend(addWire(wire1, max, gridPoints))
# # print 'adding wire2'
# # possiblePoints.extend(addWire(wire2, max, gridPoints))
# # print possiblePoints
# print 'finding dist'
# possiblePoints = [(43835, 41951), (43835, 42131), (44113, 42459), (44113, 42287), (43835, 42287), (43559, 42131), (43559, 41951), (44274, 41762), (44382, 41787), (44382, 41853), (44248, 41762), (44199, 41398), (42689, 40721), (42378, 40603), (42378, 40833), (43445, 41575), (43835, 41936), (43987, 41951), (43987, 42131), (43835, 42236), (43559, 42236), (44113, 42584), (44130, 45085), (43532, 44886), (43532, 45244), (43605, 45244), (44130, 45244), (44172, 45715), (46311, 45759), (46915, 45635), (46692, 45759), (46692, 45850), (46474, 46805), (46474, 46704), (46846, 46534), (46846, 46082), (47898, 47178), (48065, 48754), (48442, 48308), (48354, 48722), (48354, 48754), (48065, 48929), (48020, 48754), (47642, 48493), (48020, 48768), (48065, 48768), (48354, 48768), (48632, 49249), (49050, 49249), (49050, 48887), (48632, 48887), (48542, 48754), (48542, 48308), (48599, 48308), (48542, 48451), (48442, 48451), (48354, 48451), (48020, 48451), (47956, 48754), (47956, 48768), (48065, 49017), (48065, 49091), (47495, 49091), (47495, 48535), (47642, 48535), (47786, 48535), (47906, 48074), (47906, 48057), (48138, 47608), (48138, 47303), (48138, 47178), (48138, 47319), (48138, 47375), (48672, 46182), (48611, 46468), (48321, 46678), (47807, 47178), (48138, 47466), (48200, 47375), (48200, 47319), (48200, 47303), (48200, 47178), (48200, 47138), (48514, 47138), (48367, 47295), (48200, 47295), (48138, 47295), (48023, 47178), (47898, 47061), (47807, 47061), (47807, 46808), (47898, 46808), (47962, 46700), (47962, 46678), (47962, 46033), (47804, 46031), (47236, 46082), (47268, 46177), (47800, 46808), (47807, 47033), (47898, 47033), (48200, 47033), (48424, 46806), (48424, 46678), (48321, 46199), (48271, 46033), (49049, 45973), (48672, 45973), (48271, 45973), (48202, 46033), (48202, 46678), (48202, 46700), (48202, 46806), (48424, 46955), (48514, 46955), (48592, 46678), (48424, 46659), (48321, 46659), (48321, 46668), (48424, 46668), (48592, 46668), (48611, 46668), (48862, 46668), (48862, 46773), (48592, 46773), (48540, 46678), (48540, 46668), (48540, 46659), (48540, 46468), (48540, 46182), (48321, 46116), (48271, 46116), (48202, 46116), (47962, 46116), (47672, 46807), (47672, 46808), (47395, 47061), (47448, 47228), (47807, 47228), (47898, 47228), (48023, 47228), (48138, 47228), (48200, 47228), (48223, 47295), (48223, 47303), (48223, 47319), (48223, 47375), (48223, 47608), (48223, 47879), (48223, 48057), (48442, 48088), (48470, 48308), (48470, 48451), (48542, 48572), (48780, 48572), (48609, 47375), (48862, 47271), (48862, 47220), (48584, 47220), (48514, 47220), (48367, 47220), (48231, 47178), (48231, 47138), (48231, 47033), (48231, 46955), (48202, 46892), (48200, 46892), (48032, 47033), (48032, 47178), (48032, 47228), (48032, 47295), (48032, 47303), (48032, 47466), (48032, 47608), (47906, 47704), (47448, 47704), (45577, 47222), (45408, 46679), (45113, 46485), (44795, 46135), (44378, 46135), (44378, 46421), (45577, 47999), (46043, 48516), (45833, 48516), (45833, 48138), (45698, 47993), (45577, 47993), (45373, 47999), (45792, 48802), (45833, 48802), (45840, 48516), (45833, 48392), (45373, 48392), (43859, 47288), (44589, 48257), (44444, 48259), (44440, 48259), (44298, 48164), (44589, 47673), (44771, 47673), (45143, 47999), (45143, 48051), (44589, 48051), (44386, 48164), (44386, 48259), (44440, 48295), (44444, 48295), (45040, 48295), (45332, 48392), (39879, 41711), (40092, 42591), (40092, 42595), (37783, 42510), (37981, 42604), (38521, 43337), (38644, 42994), (39561, 42896), (39718, 42896), (40225, 42738), (40092, 42695), (40025, 42896), (40025, 43148), (40313, 43148), (40471, 42738), (40092, 42464), (39949, 42591), (39949, 42595), (39949, 42896), (39718, 43100), (39619, 42896), (39619, 42737), (39619, 42595), (39949, 42593), (40092, 42593), (40310, 42595), (40310, 42738), (40310, 43148), (40310, 43444), (41603, 45602), (42182, 46239), (41995, 46450), (41137, 47152), (41137, 47296), (40628, 47244), (40316, 46726), (40316, 47225), (40599, 47244), (40687, 47935), (40687, 47662), (41344, 47662), (41352, 47405), (41352, 47296), (41352, 47152), (41995, 46947), (44378, 46147), (44547, 47079), (44547, 47548), (44547, 47673), (44298, 47871), (44289, 47548), (43859, 47353), (43803, 47353), (44190, 46586), (44208, 46421), (44208, 46147), (44208, 46135), (44184, 46135), (44184, 46147), (44208, 46250), (44208, 46241), (44184, 46241), (44020, 46147), (44172, 46080), (44184, 46080), (44208, 46080), (44378, 46080), (44378, 46086), (44208, 46086), (44184, 46086), (44172, 46086), (44020, 46086), (43976, 46086), (43732, 46586), (43859, 47030), (43995, 47030), (43995, 47237), (43882, 47030), (43882, 46882), (43882, 46586), (43732, 46510), (42846, 46732), (43007, 46505), (43245, 46675), (41583, 47339), (41554, 47405), (41358, 47405), (41352, 47324), (41137, 47324), (40783, 47296), (40783, 47244), (40628, 46789), (40316, 46789), (39789, 47225), (38405, 45670), (37901, 45668), (38499, 45272), (38607, 45825), (38607, 46025), (39561, 42897), (39444, 42897), (39492, 42023), (39879, 42023), (40050, 41932), (40050, 41670), (40858, 41270), (41151, 40733), (42818, 40152), (43154, 39902), (41841, 40600), (41736, 41236), (41390, 40733), (41390, 40600), (41370, 40600), (41390, 40620), (41809, 40620), (41831, 40620), (41895, 40603), (41895, 40600), (42200, 39726), (42480, 39879), (42467, 39995), (42431, 39464), (42431, 39166), (43760, 38765), (44286, 38585), (44911, 38568), (46048, 39705), (46614, 39250), (46828, 39250), (46895, 38939), (46462, 39250), (46614, 39374), (46828, 39631), (47125, 38939), (47292, 38699), (46804, 38939), (46804, 39040), (46804, 39250), (46828, 39272), (47125, 39272), (47145, 38939), (47145, 38699), (47145, 38525), (47747, 37624), (47293, 37669), (47458, 37754), (47458, 38117)]
#
# findManDistance(possiblePoints, max)
# # printGrid(grid)
def process_wire(instr_line):
    current_pos = [0, 0]
    for instr in instr_line.split(','):
        for _ in range(int(instr[1:])):
            current_pos[0 if instr[0] in ('L', 'R') else 1] += -1 if instr[0] in ('L', 'D') else 1
            yield tuple(current_pos)

with open('3.txt', 'r') as f:
    wires = [list(process_wire(line)) for line in f.readlines()]

intersections = set(wires[0]) & set(wires[1])

print(min(abs(x)+abs(y) for (x, y) in intersections)) #Part 1
print(2 + min(sum(wire.index(intersect) for wire in wires) for intersect in intersections))
